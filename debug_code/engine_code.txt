switch (cid) {
    case kClassCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ClassDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ClassDeserializationCluster();
    case kTypeParametersCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  TypeParametersDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) TypeParametersDeserializationCluster();

    case kTypeArgumentsCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  TypeArgumentsDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z)
          TypeArgumentsDeserializationCluster(is_canonical, !is_non_root_unit_);

    case kPatchClassCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  PatchClassDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) PatchClassDeserializationCluster();

    case kFunctionCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  FunctionDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) FunctionDeserializationCluster();


    case kClosureDataCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ClosureDataDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ClosureDataDeserializationCluster();

    case kFfiTrampolineDataCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  FfiTrampolineDataDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) FfiTrampolineDataDeserializationCluster();


    case kFieldCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  FieldDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) FieldDeserializationCluster();

    case kScriptCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ScriptDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ScriptDeserializationCluster();

    case kLibraryCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  LibraryDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) LibraryDeserializationCluster();


    case kNamespaceCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  NamespaceDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) NamespaceDeserializationCluster();

#if !defined(DART_PRECOMPILED_RUNTIME)
    case kKernelProgramInfoCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  KernelProgramInfoDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) KernelProgramInfoDeserializationCluster();
#endif  // !DART_PRECOMPILED_RUNTIME
    case kCodeCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  CodeDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) CodeDeserializationCluster();

    case kObjectPoolCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ObjectPoolDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ObjectPoolDeserializationCluster();
    case kPcDescriptorsCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  PcDescriptorsDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) PcDescriptorsDeserializationCluster();


    case kCodeSourceMapCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  CodeSourceMapDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) CodeSourceMapDeserializationCluster();
    case kCompressedStackMapsCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  CompressedStackMapsDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) CompressedStackMapsDeserializationCluster();
    case kExceptionHandlersCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ExceptionHandlersDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ExceptionHandlersDeserializationCluster();


    case kContextCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ContextDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ContextDeserializationCluster();
    case kContextScopeCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ContextScopeDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ContextScopeDeserializationCluster();



    case kUnlinkedCallCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  UnlinkedCallDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) UnlinkedCallDeserializationCluster();
    case kICDataCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ICDataDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ICDataDeserializationCluster();

    case kMegamorphicCacheCid:
      ASSERT(!is_canonical);
      return new (Z) MegamorphicCacheDeserializationCluster();
    case kSubtypeTestCacheCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  SubtypeTestCacheDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) SubtypeTestCacheDeserializationCluster();


    case kLoadingUnitCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  LoadingUnitDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) LoadingUnitDeserializationCluster();
    case kLanguageErrorCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  LanguageErrorDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) LanguageErrorDeserializationCluster();
    case kUnhandledExceptionCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  UnhandledExceptionDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) UnhandledExceptionDeserializationCluster();
    case kLibraryPrefixCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  LibraryPrefixDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) LibraryPrefixDeserializationCluster();


    case kTypeCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  TypeDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z)
          TypeDeserializationCluster(is_canonical, !is_non_root_unit_);
    case kFunctionTypeCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  FunctionTypeDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z)
          FunctionTypeDeserializationCluster(is_canonical, !is_non_root_unit_);
    case kTypeRefCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  TypeRefDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) TypeRefDeserializationCluster();
    case kTypeParameterCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  TypeParameterDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z)
          TypeParameterDeserializationCluster(is_canonical, !is_non_root_unit_);
    case kClosureCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ClosureDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ClosureDeserializationCluster(is_canonical);


    case kMintCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  MintDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) MintDeserializationCluster(is_canonical);
    case kDoubleCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  DoubleDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) DoubleDeserializationCluster(is_canonical);
    case kGrowableObjectArrayCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  GrowableObjectArrayDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) GrowableObjectArrayDeserializationCluster();
    case kStackTraceCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  StackTraceDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) StackTraceDeserializationCluster();
    case kRegExpCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  RegExpDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) RegExpDeserializationCluster();
    case kWeakPropertyCid:
      ASSERT(!is_canonical);
      THR_Print("MiDuoKi Deserializer::ReadCluster()  WeakPropertyDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) WeakPropertyDeserializationCluster();
    case kLinkedHashMapCid:
      // We do not have mutable hash maps in snapshots.
      UNREACHABLE();


    case kImmutableLinkedHashMapCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  LinkedHashMapDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) LinkedHashMapDeserializationCluster(
          is_canonical, kImmutableLinkedHashMapCid);
    case kLinkedHashSetCid:
      // We do not have mutable hash sets in snapshots.
      UNREACHABLE();
    case kImmutableLinkedHashSetCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  LinkedHashSetDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) LinkedHashSetDeserializationCluster(
          is_canonical, kImmutableLinkedHashSetCid);
    case kArrayCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ArrayDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) ArrayDeserializationCluster(is_canonical, kArrayCid);
    case kImmutableArrayCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  ArrayDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z)
          ArrayDeserializationCluster(is_canonical, kImmutableArrayCid);
    case kStringCid:
      THR_Print("MiDuoKi Deserializer::ReadCluster()  StringDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) StringDeserializationCluster(
          is_canonical,
          !is_non_root_unit_ && isolate_group() != Dart::vm_isolate_group());
#define CASE_FFI_CID(name) case kFfi##name##Cid:
      CLASS_LIST_FFI_TYPE_MARKER(CASE_FFI_CID)
#undef CASE_FFI_CID
      THR_Print("MiDuoKi Deserializer::ReadCluster()  InstanceDeserializationCluster %d %ld" , is_canonical , cid);
      return new (Z) InstanceDeserializationCluster(cid, is_canonical);